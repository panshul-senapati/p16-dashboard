import requests
import pandas as pd
import time
import os

# -------- CONFIGURATION -------- #
TOKEN = "ghp_your_token_here"   # üîÅ Replace with your GitHub token
REPO = "owner/repo"             # üîÅ Format: owner/repo (e.g. openai/gym)
HEADERS = {"Authorization": f"token {TOKEN}"}

OUTPUT_FOLDER = "data"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# -------- PULL REQUESTS -------- #
def fetch_pull_requests():
    print("üîÅ Fetching pull requests...")
    all_prs = []
    page = 1
    while True:
        url = f"https://api.github.com/repos/{REPO}/pulls?state=all&per_page=100&page={page}"
        response = requests.get(url, headers=HEADERS)
        if response.status_code != 200:
            print("‚ùå Error:", response.status_code, response.json())
            break

        data = response.json()
        if not data:
            break

        for pr in data:
            all_prs.append({
                "date": pr["created_at"][:10],
                "id": pr["id"]
            })
        page += 1
        time.sleep(1)  # to respect rate limits

    if not all_prs:
        print("‚ö†Ô∏è No pull request data found.")
        return

    df_prs = pd.DataFrame(all_prs)
    df_prs_grouped = df_prs.groupby("date").count().reset_index()
    df_prs_grouped.columns = ["date", "pr_count"]
    df_prs_grouped.to_csv(os.path.join(OUTPUT_FOLDER, "github_pull_requests.csv"), index=False)
    print("‚úÖ Saved pull requests to github_pull_requests.csv")

# -------- DOWNLOADS -------- #
def fetch_downloads():
    print("üì¶ Fetching download stats...")
    url = f"https://api.github.com/repos/{REPO}/releases"
    response = requests.get(url, headers=HEADERS)
    if response.status_code != 200:
        print("‚ùå Error:", response.status_code, response.json())
        return

    downloads = []
    for release in response.json():
        for asset in release.get("assets", []):
            downloads.append({
                "date": release["published_at"][:10],
                "downloads": asset["download_count"]
            })

    if not downloads:
        print("‚ö†Ô∏è No downloads data found.")
        return

    df_downloads = pd.DataFrame(downloads)
    df_downloads = df_downloads.groupby("date").sum().reset_index()
    df_downloads.to_csv(os.path.join(OUTPUT_FOLDER, "github_downloads.csv"), index=False)
    print("‚úÖ Saved downloads to github_downloads.csv")

# -------- MAIN -------- #
if __name__ == "__main__":
    fetch_pull_requests()
    fetch_downloads()

